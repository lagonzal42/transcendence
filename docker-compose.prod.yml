services:
  db:
    image: postgres
    container_name: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    # environment:
    #   - POSTGRES_DB=postgres
    #   - POSTGRES_USER=postgres
    #   - POSTGRES_PASSWORD=postgres
    networks:
      - app-network
    env_file:
      - .env

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - .:/code
    expose:
      - "8000"
    # environment:
    #   - DB_NAME=postgres
    #   - DB_USER=postgres
    #   - DB_PASSWORD=postgres
    #   - DB_HOST=db
    #   - DB_PORT=5432
    depends_on:
      - db
      - redis
    networks:
      - app-network
    env_file:
      - .env
    
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6378:6379"
    networks:
      - app-network

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    # volumes:
    #   - ./frontend:/usr/src/app  # Montar el directorio local en el contenedor
    ports:
      - "443:443"
    depends_on:
      - backend
    networks:
      - app-network
    env_file:
      - .env

  adminer:
    container_name: adminer
    image: adminer
    restart: always
    networks:
      - app-network
    ports:
      - "8080:8080"
      - "9876:8080"
    depends_on:
      - db

  # node-exporter:
  #   image: prom/node-exporter
  #   container_name: node-exporter
  #   restart: unless-stopped
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.rootfs=/rootfs'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #   expose: 
  #     - 9100
  #   networks:
  #     - app-network

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   restart: unless-stopped
  #   user: root
  #   volumes:
  #     - /sgoinfre/students/abasante/transcendence/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #   ports:
  #     - '9090:9090'
  #   networks:
  #     - app-network
  
  # grafana:
  #   image: grafana/grafana-enterprise
  #   container_name: grafana
  #   restart: unless-stopped
  #   ports:
  #    - '3000:3000'
  #   volumes:
  #     - grafana-storage:/var/lib/grafana
  #     - ./grafana/dashboards:/var/lib/grafana/dashboards
  #     - ./grafana/provisioning:/etc/grafana/provisioning
  #   environment:
  #   - GF_SECURITY_ADMIN_USER=admin
  #   - GF_SECURITY_ADMIN_PASSWORD=admin
  #   networks:
  #     - app-network
  
  # pg_exporter:
  #   image: wrouesnel/postgres_exporter
  #   container_name: pg-exporter
  #   restart: always
  #   ports:
  #     - '9187:9187'
  #   environment:
  #     - DATA_SOURCE_NAME=postgresql://postgres:postgres@postgres:5432/postgres?sslmode=disable
  #   networks:
  #     - app-network

networks:
  app-network:
    driver: bridge

volumes:
  # frontend-app:
  #   name: frontend-app
  #   driver_opts:
  #     device: './frontend'
  #     o: bind
  #     type: none
  postgres-data:
    name: postgres_data
    driver: local
  grafana-storage: {}
  prometheus_data: {}