events{}
http {
    include /etc/nginx/mime.types;
    
    types {
        application/javascript mjs js;
        text/css css;
    }

    server {
        listen 443 ssl;
        server_name localhost;

        ssl_certificate /etc/nginx/server.crt;
        ssl_certificate_key /etc/nginx/server.key;

        root /usr/share/nginx/html;

        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' 'https://localhost:8089' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

        # Special handling for verify endpoint with query parameters
        location = /verify {
            try_files /index.html =404;
            add_header Cache-Control "no-store, no-cache, must-revalidate" always;
            add_header X-Debug-Original-URI $request_uri always;
        }

        # Handle localized paths
        location ~ "^/[a-z]{2}-[A-Z]{2}" {
            rewrite "^/[a-z]{2}-[A-Z]{2}/(.*)" /$1 last;
        }

        # Handle assets and i18n files
        location /assets/ {
            alias /usr/share/nginx/html/assets/;
            try_files $uri $uri/ =404;
            add_header Cache-Control "public, max-age=31536000";
        }

        # Handle static files
        location ~ \.(js|mjs|css|png|jpg|jpeg|gif|ico|json|woff|woff2|ttf|svg|eot)$ {
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "public, max-age=31536000";
        }

        # WebSocket connections
        location /backend/ws/ {
            proxy_pass http://backend:8000/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific settings
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            
            # Debug headers
            add_header X-Debug-Backend-URL $upstream_addr;
            add_header X-Debug-Request-URI $request_uri;
        }

        # Handle all other routes
        location / {
            # Don't add a trailing slash which would cause redirects
            try_files $uri $uri/ /index.html =404;
            # For debugging purposes
            add_header X-Debug-Original-URI $request_uri always;
            # Disable caching for dynamic routes
            add_header Cache-Control "no-store, no-cache, must-revalidate" always;
        }

        # Reverse Proxy to django
        location /backend/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'https://localhost:8089' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            rewrite ^/backend(/.*)$ $1 break;
            proxy_pass http://backend:8000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Debug headers
            add_header X-Debug-Backend-URL $upstream_addr;
            add_header X-Debug-Request-URI $request_uri;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 502 = @backend_down;
        }

        location @backend_down {
            return 502 '{"error": "Backend service unavailable"}';
            add_header Content-Type application/json;
        }
    }
}